# -*- coding: utf-8 -*-
"""Assignment01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wpLiMQEonBWnPkQNl7Pf5shEHgiMQLWX

**Upload the 5 files from the local machine**
"""

from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

"""**Uploading Query file**"""

from google.colab import files

uploaded2 = files.upload()

for fn in uploaded2.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded2[fn])))

"""

---


`Importing relavent libraries and calculating the similarity value using cosine similarity`



---



"""

# import TfidfVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import manhattan_distances

def similarity(data, query):
    tfidf = TfidfVectorizer()
    result = tfidf.fit_transform([data, query])
    # print(result)
    finalSimilarityValue = manhattan_distances(result[0], result[1])
    return finalSimilarityValue[0][0];

doc = list(uploaded.values());
# print(doc[0],"\n",doc[1],"\n",doc[2],"\n",doc[3],"\n",doc[4])
query = list(uploaded2.values());

# print(query);
final_result = [];
for data in doc:
  similarityValue = similarity(str(data),str(query));
  final_result.append(similarityValue);
  print("file {} with cosine similarity {}".format(doc.index(data)+1,similarityValue))

similarityFinalValue = min(final_result);
file = final_result.index( min(final_result)) +1;
print("\nfile {} has the minimum manhattan distance value  {}".format(file,similarityFinalValue))